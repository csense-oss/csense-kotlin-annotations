import org.jetbrains.kotlin.gradle.dsl.ExplicitApiMode
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    //versions & naming
    ext.csenseVersionName = "0.0.61"
    ext.csenseGroupId = "csense.kotlin"
    ext.csenseArtifactId = "csense-kotlin-annotations"

    //repo settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseRepoName = "maven"

    ext.csenseGithub = "csense-oss/csense-kotlin-annotations"
    ext.csenseLicense = "MIT"
    ext.csenseLicenseUrl = "https://mit-license.org/"

    ext.csenseDeveloperAlias = "tvede-dk"
    ext.csenseDeveloperName = "Kasper Tvede"
    ext.csenseDeveloperEmail = "csenseoss@tvedesys.dk"

    ext.readme = "readme.md"
    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin-annotations"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin-annotations.git"
    ext.csenseArtifactDescription = "An annotations based library that together with a plugin provides advanced IDE support / help"
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version "1.8.10"
    id "maven-publish"
}


repositories {
    mavenCentral()
}

project.group = csenseGroupId
project.version = csenseVersionName

group project.csenseGroupId
version project.csenseVersionName

kotlin {
    explicitApi = ExplicitApiMode.Strict

    jvm()
    js(IR) {
        browser()
        nodejs()
    }

    //Native targets, based on https://kotlinlang.org/docs/native-target-support.html
    //- tier 1
    linuxX64()
    macosX64()
    macosArm64()
    iosSimulatorArm64()
    iosX64()

    //- tier 2
    linuxArm64()
    watchosSimulatorArm64()
    watchosX64()
    watchosArm32()
    watchosArm64()
    tvosSimulatorArm64()
    tvosX64()
    tvosArm64()
    iosArm64()

    //- tier 3 (some)
    mingwX64()
    //end native targets

    sourceSets {
        commonMain {
        }
    }

}



apply from: "$rootDir/gradle/publish.gradle"

task uploadProd(dependsOn: ["assemble", "allTests", "publish"])

// warnings as errors
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.allWarningsAsErrors = true
}

//progressive mode & api version + optIns
kotlin.sourceSets.configureEach {
    languageSettings {
        progressiveMode = true
        languageVersion = "1.8"
        optIn("kotlin.contracts.ExperimentalContracts")
    }
}

