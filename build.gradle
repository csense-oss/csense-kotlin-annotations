buildscript {
//libray settings
    ext.csenseUserOrg = "csense-oss"
    ext.csenseRepoName = "maven"
    ext.csenseVersionName = "0.0.2"
    ext.csenseGroupId = "csense-kotlin"
    ext.csenseGithub = "csense-oss/csense-kotlin-annotations"
    ext.csenseLicense = "MIT"
    ext.csenseArtifactId = "csense-kotlin-annotations"
    ext.readme = "readme.md"
    ext.csenseWebsite = "https://github.com/csense-oss/csense-kotlin-annotations"
    ext.csenseGit = "https://github.com/csense-oss/csense-kotlin-annotations.git"

    ext.csenseArtifactDescription = "Library containing annotations to be used in conjunction with SA tools"
    ext.csenseVersionDescription = "initial version"

}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.50'
    id 'org.jetbrains.dokka' version '0.10.0'
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.4"
}

repositories {
    jcenter()
}

group project.csenseGroupId
version '0.0.1'

kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }

    }
}

kotlin.sourceSets.all {
    languageSettings.progressiveMode = true
}

dokka {
    multiplatform {
        global {
            perPackageOption {
                prefix = "csense.kotlin.annotations"
                suppress = true
            }
        }
        js {}
        jvm {}
    }
}

bintrayUpload.dependsOn("dokka")

bintray {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties')?.newDataInputStream())
        user = properties.getProperty('bintrayUser')
        key = properties.getProperty('bintrayApiKey')
    } catch (Exception ignored) {
        print "could not read local.properties"
    }
    publications = publishing.publications.getNames()
    override = true
    publish = false
    pkg {
        repo = project.csenseRepoName
        userOrg = project.csenseUserOrg
        vcsUrl = project.csenseGit
        licenses = project.csenseLicense
        name = project.csenseArtifactId
    }
}